*************************************************
Julian Sovernigo            0948924
gsoverni@mail.uoguelph.ca
CIS2520_F16                 A2: Equations and Heaps

11/7/2016
*************************************************

******************
Pledge of Honesty
******************
    By handing in this assignment with this README file, I
assert that I have sole access and control over my submission,
and that this submission contains entirely my own work. I
affirm that I have not colaborated in the creation of this code,
nor have I taken any segment of code that I do not have express
ownership or permission to use.

************
Compilation
************

1- cd to the root folder of the program
2- type 'make' in the root folder.
	a- this will make two executables, q1 and q2
3- to remove resources generated by compilation, please type 'make clean'

********************
Running the program
********************

1- cd to the root folder of the program
2- execute either q1 or q2
	a- q1 needs a fully parenthesized equation as a command line argument.
	b- q2 requires a file called f.dat to be in the folder assets.
3- the output will be:
	a- a calculation program that will display several options, like display and update and solve.
	b- a heapifying program which reads the contents of f.dat and produces a heap out of the
		(essentially) 2-dimentional array.

********
Testing
********

Equation Solver:
	Test:	Program was given a valid expression
	Result:	all functionality worked as planned.
	
	Test:	Program was given a divide by zero, (but otherwise valid) equation
	Result:	all functionality worked as planned, divide by zero was caught.

	Test:	Program was given a non-valid equation
	Result:	Program loaded properly, but when solve was selected, program declared an issue with
			process of solving/printing it (gracefully handled.)

Heapifier:
	Test:	Program was given the normal test file
	Result:	the output was correctly heapified, and displayed in level-order.


************
Limitations
************

	Due to the complexity of the solution, there are obvious limitations in the calculator.  
an incorrect equation should not allow the program to continue but prevent solution, it should
reject the input outright.  However, given the limited time and resources, fully perfecting the
calculator would be a very difficult task. However, as it does not abort or arrive at a fatal
exception, this issue is not at the top of the priority.

	More advanced calculations, such as log, trig, or calculus (differentiation, integration, etc.)
would also prove to be a more helpful addition.  As it stands, these calculations are difficult to
do with pen and paper, and so would be far more difficult to do (in 3 weeks) in a computer system.

	For the heapifying program, an option for min/max heaping proceedures, or at least a command-
line argument for file name would have been an improvement, though it was left unimplimented, so
the user must assure that the file f.dat is located in a folder called assets in the root 
directory of the program's executable.
